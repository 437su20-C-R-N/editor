from fabric.api import *
from fabric.contrib.console import confirm

import json

"""
	fabhosts.json should look like: 

	{
		"hosts": {
			"hostname": {
				"numbas_path": path to numbas on server,
				"editor_path": path to numbas_editor on server,
				"python": path of python executable to use with Django
			},
			etc...
		},
		"roledefs": {
			alias: hostname
		}
	}
"""

# load host settings
try:
	config = json.loads(open('fabhosts.json').read())
	env.hosts_settings = config['hosts']
	env.roledefs = config['roledefs']

	#if no hosts given on command-line, use all hosts defined in the setting file
	if len(env.hosts)==len(env.roles)==0:
		env.hosts = list(env.hosts_settings.keys())
except IOError:
	pass	# no hosts defined, so tasks will run on localhost only

# decorator to get settings for current host and put them in env.host_settings
def with_host_settings(f):
	def inner(*args,**kwargs):
		env.host_settings = env.hosts_settings[env.host]
		return f(*args,**kwargs)
	return inner

# update the Numbas compiler on the server
@with_host_settings
def update_numbas(branch=None):
	path = env.host_settings['numbas_path']
	with cd(path):
		if branch is None:
			branch = current_branch()

		run('git checkout %s' % branch)
		run('git pull readonly %s' % branch)

# update the editor on the server
@with_host_settings
def update_editor(branch=None):
	path = env.host_settings['editor_path']
	python = env.host_settings['python']
	with cd(path):
		if branch is None:
			branch = current_branch()

		with hide('stdout'):
			run('git checkout %s' % branch)
			run('git pull readonly %s' % branch)
			run('%s manage.py syncdb' % python)
			run('%s manage.py migrate editor' % python)
			run('%s manage.py migrate accounts' % python)
			run('%s manage.py collectstatic --noinput' % python)
			run('touch web/django.wsgi')

# run a django management command
@with_host_settings
def manage(cmd):
	path = env.host_settings['editor_path']
	python = env.host_settings['python']
	with cd(path):
		run('%s manage.py %s' % (python,cmd))

def latest_users():
	manage('latestusers')

# get the current branch of the git repository in current directory
def current_branch():
	with hide('running', 'stdout', 'stderr'):
		return run('git rev-parse --abbrev-ref HEAD')
